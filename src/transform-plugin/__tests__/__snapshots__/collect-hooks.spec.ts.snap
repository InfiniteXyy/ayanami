// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`collect hooks plugin specs should collect from arrow-function-none-block component 1`] = `
"import React from 'react';
import ReactDOM from 'react-dom';
import { Modal } from 'antd';
const CountComponent = () => {
    require(\\"ayanami\\").collectModules(CountComponent[require(\\"ayanami\\").SSRSymbol]);
    return React.createElement(Modal, null);
};
CountComponent[require(\\"ayanami\\").SSRSymbol] = [Modal[require(\\"ayanami\\").SSRSymbol]];
ReactDOM.render(React.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should collect from function component 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
var react_1 = require(\\"react\\");
var react_dom_1 = require(\\"react-dom\\");
var index_1 = require(\\"../../index\\");
function CountComponent() {
    require(\\"ayanami\\").collectModules(CountComponent[require(\\"ayanami\\").SSRSymbol]);
    var _a = index_1.useAyanami(Count), count = _a[0].count, actions = _a[1];
    var tips = index_1.useAyanami(Tips)[0].tips;
    var add = function (count) { return function () { return actions.add(count); }; };
    var minus = function (count) { return function () { return actions.minus(count); }; };
    return (react_1.default.createElement(\\"div\\", null,
        react_1.default.createElement(\\"p\\", null,
            \\"count: \\",
            count),
        react_1.default.createElement(\\"p\\", null,
            \\"tips: \\",
            tips),
        react_1.default.createElement(\\"button\\", { onClick: add(1) }, \\"add one\\"),
        react_1.default.createElement(\\"button\\", { onClick: minus(1) }, \\"minus one\\"),
        react_1.default.createElement(\\"button\\", { onClick: actions.reset }, \\"reset to zero\\")));
}
CountComponent[require(\\"ayanami\\").SSRSymbol] = [Count, Tips];
react_dom_1.default.render(react_1.default.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should collect from literal-scope component 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
var react_1 = require(\\"react\\");
var react_dom_1 = require(\\"react-dom\\");
var index_1 = require(\\"../../index\\");
function CountComponent() {
    require(\\"ayanami\\").collectModules(CountComponent[require(\\"ayanami\\").SSRSymbol]);
    var _a = index_1.useAyanami(Count, { scope: 'Count' }), count = _a[0].count, actions = _a[1];
    var add = function (count) { return function () { return actions.add(count); }; };
    var minus = function (count) { return function () { return actions.minus(count); }; };
    return (react_1.default.createElement(\\"div\\", null,
        react_1.default.createElement(\\"p\\", null,
            \\"count: \\",
            count),
        react_1.default.createElement(\\"button\\", { onClick: add(1) }, \\"add one\\"),
        react_1.default.createElement(\\"button\\", { onClick: minus(1) }, \\"minus one\\"),
        react_1.default.createElement(\\"button\\", { onClick: actions.reset }, \\"reset to zero\\")));
}
CountComponent[require(\\"ayanami\\").SSRSymbol] = [{ module: Count, scope: \\"Count\\" }];
react_dom_1.default.render(react_1.default.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should collect from smoke-1 component 1`] = `
"var render = function (Component) {
    require(\\"ayanami\\").collectModules(render[require(\\"ayanami\\").SSRSymbol]);
    var _a = configureStore(), store = _a.store, history = _a.history;
    var client = InjectableFactory.getInstanceByToken(apolloClientProvider.provide);
    renderFunc(React.createElement(PrerenderCacheProvider, null,
        React.createElement(LocaleProvider, { locale: zhCN },
            React.createElement(Provider, { store: store },
                React.createElement(ApolloProvider, { client: client },
                    React.createElement(ConnectedRouter, { history: history },
                        React.createElement(Component, null)))))), document.querySelector('#app'));
};
render[require(\\"ayanami\\").SSRSymbol] = [PrerenderCacheProvider[require(\\"ayanami\\").SSRSymbol], LocaleProvider[require(\\"ayanami\\").SSRSymbol], Provider[require(\\"ayanami\\").SSRSymbol], ApolloProvider[require(\\"ayanami\\").SSRSymbol], ConnectedRouter[require(\\"ayanami\\").SSRSymbol]];
"
`;

exports[`collect hooks plugin specs should collect from variable component 1`] = `
"import React from 'react';
import ReactDOM from 'react-dom';
import { Modal } from 'antd';
import { useAyanami } from '../../index';
const CountComponent = () => {
    require(\\"ayanami\\").collectModules(CountComponent[require(\\"ayanami\\").SSRSymbol]);
    const [{ count }, actions] = useAyanami(Count);
    const [{ tips }] = useAyanami(Tips);
    const add = (count) => () => actions.add(count);
    const minus = (count) => () => actions.minus(count);
    return (React.createElement(\\"div\\", null,
        React.createElement(\\"p\\", null,
            \\"count: \\",
            count),
        React.createElement(\\"p\\", null,
            \\"tips: \\",
            tips),
        React.createElement(\\"button\\", { onClick: add(1) }, \\"add one\\"),
        React.createElement(\\"button\\", { onClick: minus(1) }, \\"minus one\\"),
        React.createElement(\\"button\\", { onClick: actions.reset }, \\"reset to zero\\"),
        React.createElement(Modal, null)));
};
CountComponent[require(\\"ayanami\\").SSRSymbol] = [Count, Tips, Modal[require(\\"ayanami\\").SSRSymbol]];
ReactDOM.render(React.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should collect from variable-function component 1`] = `
"import React from 'react';
import ReactDOM from 'react-dom';
import { useAyanami } from '../../index';
const CountComponent = function () {
    require(\\"ayanami\\").collectModules(CountComponent[require(\\"ayanami\\").SSRSymbol]);
    const [{ count }, actions] = useAyanami(Count);
    const [{ tips }] = useAyanami(Tips);
    const add = (count) => () => actions.add(count);
    const minus = (count) => () => actions.minus(count);
    return (React.createElement(\\"div\\", null,
        React.createElement(\\"p\\", null,
            \\"count: \\",
            count),
        React.createElement(\\"p\\", null,
            \\"tips: \\",
            tips),
        React.createElement(\\"button\\", { onClick: add(1) }, \\"add one\\"),
        React.createElement(\\"button\\", { onClick: minus(1) }, \\"minus one\\"),
        React.createElement(\\"button\\", { onClick: actions.reset }, \\"reset to zero\\")));
};
CountComponent[require(\\"ayanami\\").SSRSymbol] = [Count, Tips];
ReactDOM.render(React.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should collect from with-memo component 1`] = `
"export var Submissions = memo(function (props) {
    require(\\"ayanami\\").collectModules(Submissions[require(\\"ayanami\\").SSRSymbol]);
    var _a = useAyanami(SubmissionModule), state = _a[0], actions = _a[1];
    var loadMore = useCallback(function () {
        actions.nextPage();
    }, []);
    useEffect(function () {
        actions.getRecentSubmissions(props.userSlug);
        return actions.disposeFetching$;
    }, [props.userSlug]);
    return (React.createElement(FeedList, { activities: state.shownSubmissions, hasMore: state.currentPage < state.totalPage, isMyProfile: props.isMyProfile, loading: state.loading, loadMore: loadMore }));
});
Submissions[require(\\"ayanami\\").SSRSymbol] = [SubmissionModule, FeedList[require(\\"ayanami\\").SSRSymbol]];
"
`;

exports[`collect hooks plugin specs should collect from with-react-memo component 1`] = `
"export var Submissions = React.memo(function (props) {
    require(\\"ayanami\\").collectModules(Submissions[require(\\"ayanami\\").SSRSymbol]);
    var _a = useAyanami(SubmissionModule), state = _a[0], actions = _a[1];
    var loadMore = useCallback(function () {
        actions.nextPage();
    }, []);
    useEffect(function () {
        actions.getRecentSubmissions(props.userSlug);
        return actions.disposeFetching$;
    }, [props.userSlug]);
    return (React.createElement(FeedList, { activities: state.shownSubmissions, hasMore: state.currentPage < state.totalPage, isMyProfile: props.isMyProfile, loading: state.loading, loadMore: loadMore }));
});
Submissions[require(\\"ayanami\\").SSRSymbol] = [SubmissionModule, FeedList[require(\\"ayanami\\").SSRSymbol]];
"
`;

exports[`collect hooks plugin specs should do nothing to basic component 1`] = `
"function Button() {
    return React.createElement(\\"button\\", null, \\"click me\\");
}
"
`;

exports[`collect hooks plugin specs should ignore anonymous component from props 1`] = `
"import React from 'react';
import ReactDOM from 'react-dom';
import { useAyanami } from '../../index';
export default function () {
    var _a = useAyanami(Count), count = _a[0].count, actions = _a[1];
    var tips = useAyanami(Tips)[0].tips;
    var add = function (count) { return function () { return actions.add(count); }; };
    var minus = function (count) { return function () { return actions.minus(count); }; };
    return (React.createElement(\\"div\\", null,
        React.createElement(\\"p\\", null,
            \\"count: \\",
            count),
        React.createElement(\\"p\\", null,
            \\"tips: \\",
            tips),
        React.createElement(\\"button\\", { onClick: add(1) }, \\"add one\\"),
        React.createElement(\\"button\\", { onClick: minus(1) }, \\"minus one\\"),
        React.createElement(\\"button\\", { onClick: actions.reset }, \\"reset to zero\\")));
}
ReactDOM.render(React.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should ignore component from params 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
function TabTitle(props) {
    require(\\"ayanami\\").collectModules(TabTitle[require(\\"ayanami\\").SSRSymbol]);
    var icon = props.icon, Title = props.Title, toolTipTitle = props.toolTipTitle, isActive = props.isActive;
    var mainNode = (React.createElement(TabHeader, null,
        icon && React.createElement(Icon, { type: icon }),
        React.createElement(Title, { isActive: isActive })));
    return toolTipTitle ? React.createElement(Tooltip, { title: toolTipTitle }, mainNode) : mainNode;
}
TabTitle[require(\\"ayanami\\").SSRSymbol] = [TabHeader[require(\\"ayanami\\").SSRSymbol], Icon[require(\\"ayanami\\").SSRSymbol], Tooltip[require(\\"ayanami\\").SSRSymbol]];
exports.TabTitle = TabTitle;
"
`;

exports[`collect hooks plugin specs should ignore component from props 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
var react_1 = require(\\"react\\");
var react_dom_1 = require(\\"react-dom\\");
var index_1 = require(\\"../../index\\");
function CountComponent(_a) {
    require(\\"ayanami\\").collectModules(CountComponent[require(\\"ayanami\\").SSRSymbol]);
    var Button = _a.Button;
    var _b = index_1.useAyanami(Count), count = _b[0].count, actions = _b[1];
    var tips = index_1.useAyanami(Tips)[0].tips;
    var add = function (count) { return function () { return actions.add(count); }; };
    var minus = function (count) { return function () { return actions.minus(count); }; };
    return (react_1.default.createElement(\\"div\\", null,
        react_1.default.createElement(\\"p\\", null,
            \\"count: \\",
            count),
        react_1.default.createElement(\\"p\\", null,
            \\"tips: \\",
            tips),
        react_1.default.createElement(\\"button\\", { onClick: add(1) }, \\"add one\\"),
        react_1.default.createElement(\\"button\\", { onClick: minus(1) }, \\"minus one\\"),
        react_1.default.createElement(\\"button\\", { onClick: actions.reset }, \\"reset to zero\\"),
        react_1.default.createElement(Button, { onClick: actions.send })));
}
CountComponent[require(\\"ayanami\\").SSRSymbol] = [Count, Tips];
react_dom_1.default.render(react_1.default.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should ignore dynamic scope from props 1`] = `
"\\"use strict\\";
Object.defineProperty(exports, \\"__esModule\\", { value: true });
var react_1 = require(\\"react\\");
var react_dom_1 = require(\\"react-dom\\");
var index_1 = require(\\"../../index\\");
function CountComponent(_a) {
    var scope = _a.scope;
    var _b = index_1.useAyanami(Count, { scope: scope }), count = _b[0].count, actions = _b[1];
    var add = function (count) { return function () { return actions.add(count); }; };
    var minus = function (count) { return function () { return actions.minus(count); }; };
    return (react_1.default.createElement(\\"div\\", null,
        react_1.default.createElement(\\"p\\", null,
            \\"count: \\",
            count),
        react_1.default.createElement(\\"button\\", { onClick: add(1) }, \\"add one\\"),
        react_1.default.createElement(\\"button\\", { onClick: minus(1) }, \\"minus one\\"),
        react_1.default.createElement(\\"button\\", { onClick: actions.reset }, \\"reset to zero\\")));
}
react_dom_1.default.render(react_1.default.createElement(CountComponent, null), document.querySelector('#app'));
"
`;

exports[`collect hooks plugin specs should ignore memo with dynamic scope from props 1`] = `
"export var Submissions = memo(function (_a) {
    require(\\"ayanami\\").collectModules(Submissions[require(\\"ayanami\\").SSRSymbol]);
    var scope = _a.scope;
    var _b = useAyanami(SubmissionModule, {
        scope: scope,
    }), state = _b[0], actions = _b[1];
    var loadMore = useCallback(function () {
        actions.nextPage();
    }, []);
    useEffect(function () {
        actions.getRecentSubmissions(props.userSlug);
        return actions.disposeFetching$;
    }, [props.userSlug]);
    return (React.createElement(FeedList, { activities: state.shownSubmissions, hasMore: state.currentPage < state.totalPage, isMyProfile: props.isMyProfile, loading: state.loading, loadMore: loadMore }));
});
Submissions[require(\\"ayanami\\").SSRSymbol] = [FeedList[require(\\"ayanami\\").SSRSymbol]];
"
`;

exports[`collect hooks plugin specs should not collect scoped component 1`] = `
"export var SolutionTab = memo(function () {
    require(\\"ayanami\\").collectModules(SolutionTab[require(\\"ayanami\\").SSRSymbol]);
    var _a = useAyanami(QuestionDetailModule), state = _a[0], actions = _a[1];
    useEffect(function () {
        state.questionSlug && actions.getSolutionCount();
    }, [state.questionSlug]);
    var title = '题解' + (state.solutionCount ? \\"(\\" + state.solutionCount + \\")\\" : '');
    var Title = simpleTitle(title, '题解');
    return (React.createElement(React.Fragment, null,
        React.createElement(Icon, { type: \\"bottle\\" }),
        React.createElement(Title, null)));
});
SolutionTab[require(\\"ayanami\\").SSRSymbol] = [QuestionDetailModule, Icon[require(\\"ayanami\\").SSRSymbol]];
"
`;
